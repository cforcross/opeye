name: Flutter CI + CD

# This workflow is triggered on pushes to the repository.
on:
  # push: 
  #   branches: [ main ] # This will trigger the workflow on every push to the main branch
  # pull_request:
  #   branches: [ main ] # Add this trigger to run this workflow on PR's to the main branch
  workflow_dispatch: # to manually run this workflow
        
jobs:
  code-analysis-and-testing:
    name: Code analysis and testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v1.4.0
      with:
        channel: 'stable' # 'dev', 'alpha', 'master', default to: 'stable'
        # flutter-version: '1.22.x' # you can also specify exact version of flutter

    - name: Get pub dependencies
      run: flutter pub get

    - name: Flutter analyze
      run: flutter analyze

    - name: Flutter test
      run: flutter test


  android:
    name: Android CI/CD
    needs: code-analysis-and-testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Prepare key.jks & key.properties files
      env:
        FS_KEYSTORE_FILE: ${{ secrets.FS_KEYSTORE_FILE }}
        FS_KEY_PROPERTIES_FILE: ${{ secrets.FS_KEY_PROPERTIES_FILE }}
      run: |
        echo "Convert base64 strings to files"
        echo "$FS_KEYSTORE_FILE" >> key.jks.base64
        echo "$FS_KEY_PROPERTIES_FILE" >> key.properties.base64
        echo "done with base64 files creation"
        base64 --decode key.jks.base64 > key.jks
        echo "done key.jks"
        base64 --decode key.properties.base64 > key.properties
        echo "done key.properties"
      working-directory: 'android/'
     
    - name: Set up Flutter
      uses: subosito/flutter-action@v1.4.0
      with:
        channel: 'stable' # 'dev', 'alpha', 'master', default to: 'stable'
        # flutter-version: '1.22.x' # you can also specify exact version of flutter
    
    - name: Flutter doctor
      run: flutter doctor
    
    - name: Build APK
      run: flutter build apk --release
    
    - name: Upload APK artifact 
      uses: actions/upload-artifact@v1
      with:
        name: release-apk
        path: build/app/outputs/flutter-apk/app-release.apk

    - name: Upload to Play Store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.FS_ANDROID_SERVICE_ACCOUNT_JSON }}
        packageName: com.daniilshumko.woeios
        releaseFiles: build/app/outputs/flutter-apk/app-release.apk
        track: internal


  ios:
    name: iOS CI/CD
    needs: code-analysis-and-testing
    runs-on: macos-latest
    timeout-minutes: 30
    steps:  
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.4

    - name: Prepare signing
      env:
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
        FS_P12_FILE: ${{ secrets.FS_P12_FILE }}
        FS_P12_PASS: ${{ secrets.FS_P12_PASS }}
        FS_PROV_FILE: ${{ secrets.FS_PROV_FILE }}
      run: |
        echo "Convert base64 strings to files"
        echo "$FS_PROV_FILE" >> prov.temp.txt
        echo "$FS_P12_FILE ">> cert.temp.txt
        base64 --decode prov.temp.txt > prov.temp.mobileprovision
        base64 --decode cert.temp.txt > cert.temp.p12
        echo "Copy provisioning file to the correct locations"
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision
        echo "Create a new keychain & import p12 certificate"
        security create-keychain -p "$FS_KEYCHAIN_PASS" build.keychain
        security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$FS_P12_PASS" -A
        echo "Set new keychain as a default"
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        echo "Clean up temp files"
        rm *.temp.*
    - name: Set up Flutter
      uses: subosito/flutter-action@v1.4.0
      with:
        channel: 'stable' # 'dev', 'alpha', 'master', default to: 'stable'
        # flutter-version: '1.22.x' # you can also specify exact version of flutter
    
    - name: Flutter doctor
      run: flutter doctor

    - name: Build IPA
      env:
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
      run: |
        echo "Unlocking keychain"
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        # Important, just in case the build takes longer than the default 300s timeout
        # Otherwise the build will freeze at signing the frameworks if the keychain is locked
        echo "Increasing keychain auto lock timeout"
        security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain
        flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
        echo "Locking keychain"
        security lock-keychain ~/Library/Keychains/build.keychain
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v1
      with:
        name: release-ipa
        path: ./build/ios/ipa/flutter_github_actions_basics.ipa

    - name: Publishing app to TestFlight
      env:
        FS_APPLE_ID_USERNAME: ${{ secrets.FS_APPLE_ID_USERNAME }}
        FS_APPLE_ID_APP_SPECIFIC_PASS: ${{ secrets.FS_APPLE_ID_APP_SPECIFIC_PASS }}
        FS_IPA_PATH: ./build/ios/ipa/flutter_github_actions_basics.ipa
      run: |
        xcrun altool --upload-app -t ios -f "$FS_IPA_PATH" -u "$FS_APPLE_ID_USERNAME" -p "$FS_APPLE_ID_APP_SPECIFIC_PASS"
  web:
    name: Web CI/CD
    needs: code-analysis-and-testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v1.4.0
      with:
        channel: 'stable' # 'dev', 'alpha', 'master', default to: 'stable'
        # flutter-version: '1.22.x' # you can also specify exact version of flutter
    
    - name: Flutter doctor
      run: flutter doctor
    
    - name: Build web
      run: flutter build web --release
    
    - name: Upload web artifact 
      uses: actions/upload-artifact@v1
      with:
        name: release-web
        path: build/web/


  ios-pre-flutter-2:
    if: false
    name: iOS CI/CD pre Flutter 2
    needs: code-analysis-and-testing
    runs-on: macos-latest
    timeout-minutes: 30
    steps:  
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.4

    - name: Prepare signing
      env:
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
        FS_P12_FILE: ${{ secrets.FS_P12_FILE }}
        FS_P12_PASS: ${{ secrets.FS_P12_PASS }}
        FS_PROV_FILE: ${{ secrets.FS_PROV_FILE }}
      run: |
        echo "Convert base64 strings to files"
        echo "$FS_PROV_FILE" >> prov.temp.txt
        echo "$FS_P12_FILE ">> cert.temp.txt
        base64 --decode prov.temp.txt > prov.temp.mobileprovision
        base64 --decode cert.temp.txt > cert.temp.p12
        echo "Copy provisioning file to the correct locations"
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision
        echo "Create a new keychain & import p12 certificate"
        security create-keychain -p "$FS_KEYCHAIN_PASS" build.keychain
        security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$FS_P12_PASS" -A
        echo "Set new keychain as a default"
        security list-keychains -s ~/Library/Keychains/build.keychain
        security default-keychain -s ~/Library/Keychains/build.keychain
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        echo "Clean up temp files"
        rm *.temp.*
    - name: Set up Flutter
      uses: subosito/flutter-action@v1.4.0
      with:
        channel: 'stable' # 'dev', 'alpha', 'master', default to: 'stable'
        # flutter-version: '1.22.x' # you can also specify exact version of flutter
    
    - name: Flutter doctor
      run: flutter doctor

    - name: Get pub dependencies
      run: flutter pub get

    - name: Prebuild the app without code signing
      run: flutter build ios --release --no-codesign

    - name: Build iOS app with signing
      env:
        FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
      run: |
        echo "Unlocking keychain"
        security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
        echo "Increasing keychain auto lock timeout"
        security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain
        
        # Building the app 
        xcodebuild -workspace Runner.xcworkspace \
        -scheme Runner \
        -sdk iphoneos \
        -configuration Release \
        -archivePath $PWD/build/Runner.xcarchive \
        clean archive | xcpretty
        echo "Locking keychain"
        security lock-keychain ~/Library/Keychains/build.keychain
      working-directory: 'ios/'

    - name: Creating IPA file
      run: ../.github/scripts/create_ipa.sh # make sure this file is executable 
      working-directory: 'ios/'

    - name: Upload IPA artifact
      uses: actions/upload-artifact@v1
      with:
        name: release-ipa-pre-flutter-2
        path: ./build/ios/ipa/flutter_github_actions_basics.ipa

    - name: Publishing app to TestFlight
      if: false # This is disabled so that it won't upload to TestFlight
      env:
        FS_APPLE_ID_USERNAME: ${{ secrets.FS_APPLE_ID_USERNAME }}
        FS_APPLE_ID_APP_SPECIFIC_PASS: ${{ secrets.FS_APPLE_ID_APP_SPECIFIC_PASS }}
        FS_IPA_PATH: ./build/ios/ipa/flutter_github_actions_basics.ipa
      run: |
        xcrun altool --upload-app -t ios -f "$FS_IPA_PATH" -u "$FS_APPLE_ID_USERNAME" -p "$FS_APPLE_ID_APP_SPECIFIC_PASS"